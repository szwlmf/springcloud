微服务是什么？
微服务是一种软件开发技术。提倡将单一应用程序划分成一组小的服务，服务之间相互协调、相互作用。每组服务都可以独立部署，且正常运行。

服务注册与发现：
eureka，zookeeper，consul，nacos
cap模式：ap模式包括eureka和nacos
cp模式包括zookeeper和consul

1、eureka的自我保护机制默认开启，当eureka服务端接受不到服务的心跳，并不会立马删除服务。可以通过
server:
    #关闭eureka自我保护机制
#    enable-self-preservation: false
关闭eureka自我保护机制。

使用eureka时，服务端启动类要添加@EnableEurekaServer
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
        </dependency>
客户端启动类要添加注解@EnableEurekaClient
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
            <version>2.2.1.RELEASE</version>
        </dependency>
        
        
zookeeper:
下载zookeeper并安装。服务端不需要用代码搭建，安装完之后启动就可以。默认端口2181
项目中引入jar包，discovery是服务发现，这个包里面含有一个2.x的zookeeper包，看情况是否需要重新引新包。
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zookeeper-discovery</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.zookeeper</groupId>
                    <artifactId>zookeeper</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.apache.zookeeper</groupId>
            <artifactId>zookeeper</artifactId>
            <version>3.4.10</version>
        </dependency>
yml文件添加配置：
spring:
  application:
    name: cloud-consumer-order
  cloud:
    zookeeper:
      connect-string: 192.168.52.129:2181
        
在客户端启动类上添加注解@EnableDiscoveryClient

consul和zookeeper用法一样


2、服务调用：ribbon和openfeign
eureka包中自带ribbon，ribbon+restTemplate实现接口调用。若要restTemplate支持负载均衡，在restTemplate配置类中加上@Loadbalanced。ribbon默认负载均衡方式是轮询，通过访问次数和服务器数量取余，来得到要匹配的服务器。
可以通过配置类IRule来改变轮询方式，配置类不能与启动类在一个包下。
openfeign
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
        </dependency>
在启动类上添加@EnableFeignClients，写service接口，不需要实现，在接口上添加注解，@FeignClient(value="注册到eureka的服务名称")，接口中的方法，访问路径，和原方法一致。openfeign里面也包含ribbon

3、服务降级、服务熔断。hystrix（断路器）用于处理分布式系统的延迟和容错的开源库。在分布式系统管理里，许多依赖不可避免的会调用失败，比如超时、异常等，Hystrix能够保证在一个以来出现错的情况下不会导致整体服务失败，
避免级联故障，以提高分布式系统的弹性。 断路器本身是一种开关，当某个服务单元出现故障，通过断路器，向调用方返回一个符合预期的、可处理的备选方案（fallback）。而不是长时间的等待，或抛出不可处理的异常。
这样就保证了服务调用方的线程不会长时间、不必要的占用，这样就避免了故障在分布式系统中蔓延甚至雪崩。

<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix</artifactId>
        </dependency>
 在启动类添加注解@EnableHystrix
在controller类添加//设置出错或者超时时默认调用方法
@DefaultProperties(defaultFallback = "globaFallback")
在方法上添加@HystrixCommand，只添加hystrixcommand注解，不添加其他，当调用出错时，会执行上面指定的默认fallback方法
在方法上添加@HystrixCommand(fallbackMethod = "get_failBack",commandProperties = {
            @HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds",value = "1500")
    })当方法调用超时，就会执行get_fallback方法
    
#feign服务支持hystrix
feign:
  hystrix:
    enabled: true
使用feign服务的service，写一个实现类。然后在使用feign服务的service上的@feignclient（name=“服务名称”，fallback=实现类.class）
上面是服务降级。下面是服务熔断。
在启动类添加@EnableCircuitBreaker
     @HystrixCommand(fallbackMethod = "paymentCircuitBreaker_fallback",commandProperties = {
            @HystrixProperty(name = "circuitBreaker.enabled",value = "true"), //是否开启断路器
            @HystrixProperty(name = "circuitBreaker.requestVolumeThreshold",value = "10") ,//请求次数
            @HystrixProperty(name = "circuitBreaker.sleepWindowInMilliseconds",value = "10000") ,//时间窗口
            @HystrixProperty(name = "circuitBreaker.errorThresholdPercentage",value = "60") //失败率
    })
  //10秒内请求次数达到10次，并且失败率超过60%开启断路器
  断路器是服务降级的一种特殊情况。
  
  
  hystrix图形化监控：dashboard
          <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-hystrix-dashboard</artifactId>
        </dependency>
启动类上添加@EnableHystrixDashboard
端口默认9001，实时监控熔断器监控的接口fallback调用情况

4、gateway  服务网关（匹配规则：route,predicate,filter）
默认端口9527
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-gateway</artifactId>
        </dependency>
  yml配置
  spring:
  application:
    name: cloud-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true    #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: payment_routh #payment_routh    路由的id，没有固定规则，但要求唯一
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAYMENT-SERVICE          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/get/**         #断言，路径相匹配的进行路由

        - id: payment_routh2 #payment_routh    路由的id，没有固定规则，但要求唯一
#          uri: http://localhost:8001          #匹配后提供服务的路由地址
          uri: lb://CLOUD-PAYMENT-SERVICE          #匹配后提供服务的路由地址
          predicates:
            - Path=/payment/lb/**         #断言，路径相匹配的进行路由

过滤器：
@Component
@Slf4j
public class MyLogGatewayFilter implements GlobalFilter, Ordered {


    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {
        log.info("*************come in MyLogGatewayFilter: \n"+new Date());
        String param = exchange.getRequest().getQueryParams().getFirst("uname");
        if(param == null){
            log.info("非法用户");
            exchange.getResponse().setStatusCode(HttpStatus.NOT_ACCEPTABLE);
            return exchange.getResponse().setComplete();
        }
        return chain.filter(exchange);
    }



    @Override
    public int getOrder() {
        return 0;//数字越小优先级越高
    }
}

5、配置中心config
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-config-server</artifactId>
        </dependency>
yml配置
spring:
  application:
    name: cloud-config-center
  cloud:
    config:
      server:
        git:
          uri: https://github.com/szwlmf/cloud_config.git
          search-paths:
            - cloud_config
      label: master
  启动类添加注解@EnableConfigServer
  上面试configserver
  
  下面是configservice
  <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>
  yml配置
  spring:
  application:
    name: config-client
  cloud:
    config:
      label: master
      name: config
      profile: dev
      uri: http://localhost:3344
 客户端controller上天加@RefreshScope，动态刷新。手动执行   curl -X POST localhost:3344/    。
 
 消息总线bus（内含rabbitmq）
  <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-bus-amqp</artifactId>
        </dependency>
 在config服务端和客户端yml都添加
 rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
  服务端yml添加
  #暴露bus舒心配置的端点
management:
  endpoints:
    web:
      exposure:
        include: 'bus-refresh'
 客户端yml添加
 management:
  endpoints:
    web:
      exposure:
        include: "*"
 实现配置自动更新
 
 
 6、消息驱动stream
 <dependency>
        <groupId>org.springframework.cloud</groupId>
        <artifactId>spring-cloud-starter-stream-rabbit</artifactId>
    </dependency>
 消息生产者yml
 spring:
  application:
    name: cloud-stream-provider
  cloud:
    stream:
      binders: #设置绑定的rabbitmq的服务信息
        rabbit: #标识定义的名称，用于binding整合
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                passward: guest
      bindings: #服务的整合处理
        output: #通道的名称
          destination: output #标识要是用的exchange 名称
          content-type: application/json #设置消息类型，文本设置text/plan
          binder: rabbit #
          
 方法实现
@EnableBinding(Source.class)
public class IMessageProviderImpl implements IMessageProvider {

    @Resource
    private MessageChannel output; //消息发送管道

    @Override
    public String send() {
        String id = UUID.randomUUID().toString();
        output.send(MessageBuilder.withPayload(id).build());
        System.out.println("***************message:\n"+id);
        return null;
    }
} 




消息消费者：
yml
spring:
  application:
    name: cloud-stream-consumer
  cloud:
    stream:
      binders: #设置绑定的rabbitmq的服务信息
        rabbit: #标识定义的名称，用于binding整合
          type: rabbit
          environment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: guest
                passward: guest
      bindings: #服务的整合处理
        input: #通道的名称
          destination: output #标识要是用的exchange 名称
          content-type: application/json #设置消息类型，文本设置text/plan
          binder: rabbit #
          group: A  #用于分组，同一组的应用，只有一个可以消费到消息。不同组的应用可以全部消费

方法实现
@Component
@EnableBinding(Sink.class)
public class ReceiveMessageController {

    @Value(value = "${server.port}")
    private String serverPort;

    @StreamListener(Sink.INPUT)
    private void receiveMessage(Message<String> message){
        System.out.println("消费者2号，接收到消息：\n"+message.getPayload()+",\nport:\n"+serverPort);
    }

}


7、sleuth+zipkin  链路监控
sleuth 日志链，在入口处生成traceID，每次调用接口，都会讲traceID传递下去。Zipkin是一款开源的分布式实时数据追踪系统
ZipKin可以分为两部分，一部分是zipkin server，用来作为数据的采集存储、数据分析与展示；zipkin client是zipkin基于不同的语言及框架封装的一些列客户端工具，
这些工具完成了追踪数据的生成与上报功能
下载地址：https://search.maven.org/remote_content?g=io.zipkin.java&a=zipkin-server&v=LATEST&c=exec
运行：java -jar  zipkin-server-2.8.3-exec.jar
zipkin Server 运行后默认的访问地址：http://localhost:9411
<dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-zipkin</artifactId>
        </dependency>
 yml配置
 spring:
  application:
    name: cloud-order-service
  zipkin:
    sender:
      type: web
    base-url: http://localhost:9411
    discoveryClientEnabled: false
  sleuth:
    sampler:
      probability: 1


8、nacos（服务注册、发现，服务总线，配置中心）
下载安装nacos 默认端口8848，
linux配置集群时
cp nacos-server-2.2.3\nacos\conf\application.properties
添加数据库配置，改为外部mysql数据库
db.num=1
db.url.0=jdbc:mysql://localhost:3306/nacos_config?characterEncoding=utf8&connectTimeout=1000&socketTimeout=3000&autoReconnect=true&serverTimezone=Asia/Shanghai
db.user=root
db.password=123456
修改start.sh文件
添加端口参数
while getopts ":m:f:s:c:p:pt:" opt
do
    case $opt in
        m)
            MODE=$OPTARG;;
        f)
            FUNCTION_MODE=$OPTARG;;
        s)
            SERVER=$OPTARG;;
        c)
            MEMBER_LIST=$OPTARG;;
        p)
            EMBEDDED_STORAGE=$OPTARG;;
        pt)
            PORT=$OPTARG;;
        ?)
        echo "Unknown parameter"
        exit 1;;
    esac
done

修改：
if [[ "$JAVA_OPT_EXT_FIX" == "" ]]; then
  nohup "$JAVA -Dserver_port =" ${PORT} ${JAVA_OPT} nacos.nacos >> ${BASE_DIR}/logs/start.out 2>&1 &
else
  nohup "$JAVA -Dserver_port =" ${PORT} "$JAVA_OPT_EXT_FIX" ${JAVA_OPT} nacos.nacos >> ${BASE_DIR}/logs/start.out 2>&1 &
fi

echo "nacos is starting，you can check the ${BASE_DIR}/logs/start.out"




注册发现
<dependency>
            <groupId>com.alibaba.cloud</groupId>
            <artifactId>spring-cloud-starter-alibaba-nacos-discovery</artifactId>
        </dependency>
 yml
 












